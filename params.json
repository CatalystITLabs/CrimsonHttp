{"name":"Crimsonhttp - http server for Dart","body":"CrimsonHttp server for Dart\r\n----------\r\n\r\nCurrently uses the chat sample http server, but will be ported to the \r\ndart:io http server once that is released\r\n\r\nLoosely inspired upon sencha/connect for node.js\r\n\r\nMakes use of log4dart, found here: https://github.com/Qalqo/log4dart\r\n(It expects to find log4dart in ../log4dart (ie, at the same level as crimson, not within the \r\ncrimson folder structure).\r\n\r\n-----\r\nUsage: See test/crimsonTest.dart for example, but it goes something like this...\r\n\r\n    main() {\r\n      CrimsonHttpServer server = new CrimsonHttpServer();\r\n  \r\n      CrimsonModule sampleModule = new CrimsonModule(server);\r\n      sampleModule.handlers\r\n                    .addEndpoint(new Favicon(\"./favicon.ico\"))               //match the favicon request\r\n                    .addFilter(new CookieSession())                          //adds session support\r\n                    .addEndpoint(new Route(\"/hello\",\"GET\",(req,res,data) {   //execute arbitary code that matches a route\r\n\t\t\t\t\t   res.outputStream.write(\"Hello\");\r\n\t\t\t\t\t))         \r\n                    .addEndpoint(new StaticFile(\"./public\"));                //serve static files\r\n  \r\n      server.modules[\"*\"] = sampleModule;  //this is the default module.\r\n   \r\n      server.listen(\"127.0.0.1\", 8082);\r\n     \r\n    }\r\n\t\r\n\t\r\n\r\n\t\r\n# TODO\r\n* Lots, especially tidy up CookieSession and StaticFile.\r\n* Route needs parameters adding\r\n* Please treat all of this as pre-alpha.  \r\n* It's not secure in the slightest, and the StaticFile handler alone will probably allow users to browse your pc!\r\n\r\n\r\n# Filters\r\n* CookieSession: sets a sessioncookie - just ported at the moment and not yet tested.  Treat as pre-alpha.\r\n\r\n# Endpoints\r\n* Favicon: Serves a favicon from either the default ./favicon.ico or ./public/favicon.ico, or some specified location.\r\n* StaticFile: serves static files from the path provided in the constructor.  Simply appends the request.uri onto whatever path you provide in, and tries to load it.  Very insecure. \r\n* Route: executes a dart method in resposne to matching a path + method","tagline":"Crimson Dart Http middleware","google":"UA-312644-6","note":"Don't delete this file! It's used internally to help with page regeneration."}